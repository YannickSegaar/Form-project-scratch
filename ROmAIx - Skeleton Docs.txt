SKELETON DOCS


GET STARTED


We recommend at least moderate experience with Svelte, SvelteKit, and Tailwind CSS before you proceed.


Please be aware that Skeleton only supports SvelteKit applications at this time.


Create Your Project
Skeleton CLI
Manual Install
First we'll generate a new SvelteKit project. If you already have a SvelteKit project, skip to the next step.


TERMINAL
Copy
npm create svelte@latest my-skeleton-app
        - Enable Typescript when prompted (recommended)
cd my-skeleton-app
npm install
Install Skeleton
Skeleton CLI
Manual Install
Install the packages for Skeleton and the Skeleton Tailwind plugin.


TERMINAL
Copy
npm i -D @skeletonlabs/skeleton @skeletonlabs/tw-plugin
Install Tailwind
Skeleton CLI
Manual Install
Svelte-Add automates the process of installing Tailwind in SvelteKit.


TERMINAL
Copy
npx svelte-add@latest tailwindcss
npm install
Tailwind Configuration
Let's make a few modifications to the tailwind.config.[ts|js|cjs], found in the root of your project.


Typescript (.ts)
Javascript (.js)
CommonJS (.cjs)
For SvelteKit projects using Typescript, install the standard node type definitions.


TERMINAL
Copy
npm add -D @types/node
Then, setup your Tailwind configuration using the .ts file extension.


TYPESCRIPT
Copy
import { join } from 'path';
import type { Config } from 'tailwindcss';


// 1. Import the Skeleton plugin
import { skeleton } from '@skeletonlabs/tw-plugin';


const config = {
        // 2. Opt for dark mode to be handled via the class method
        darkMode: 'class',
        content: [
                './src/**/*.{html,js,svelte,ts}',
                // 3. Append the path to the Skeleton package
                join(require.resolve(
                        '@skeletonlabs/skeleton'),
                        '../**/*.{html,js,svelte,ts}'
                )
        ],
        theme: {
                extend: {},
        },
        plugins: [
                // 4. Append the Skeleton plugin (after other plugins)
                skeleton
        ]
} satisfies Config;


export default config;
See our Themes guide to learn more about using Tailwind's light and dark mode options.


Add Themes
Skeleton provides several preset themes out of the box. Select a theme to learn how to implement it.


💀 Skeleton
🌨️ Wintry
🤖 Modern
🚀 Rocket
🧜‍♀️ Seafoam
📺 Vintage
🏜️ Sahara
👔 Hamlindigo
💫 Gold Nouveau
⭕ Crimson
First, register your preferred theme(s) in tailwind.config.[ts|js|cjs]. This will ensure each theme is available to use.


TYPESCRIPT
Copy
plugins: [
        skeleton({
                themes: { preset: [ "skeleton" ] }
        })
]
Next, open /src/app.html and set the active theme using the data-theme attribute.


HTML
Copy
<body data-theme="skeleton">




QUICKSTART


This guide will walk you through the basics of creating a new Skeleton app using SvelteKit.


Get Started
To begin, let's scaffold our project using the Skeleton CLI. Note that we've listed a couple required options for this guide.


TERMINAL
Copy
npm create skeleton-app@latest my-skeleton-app
        - Enable SvelteKit's Typescript syntax
        - Select the "Welcome" template
cd my-skeleton-app
npm run dev
By selecting the "Welcome" template the project will come preconfigured with both an App Shell and App Bar components in /src/routes/+layout.svelte.


Add Sidebar Navigation
Let's customize our App Shell's sidebar slot. Open /src/routes/+layout.svelte and add the following Tailwind utility classes to the AppShell slotSidebarLeft prop.


HTML
Copy
<AppShell slotSidebarLeft="bg-surface-500/5 w-56 p-4">
Next, let's implement a navigation list within the App Shell's left sidebar slot. Append this slot fragment alongside any other fragment within the AppShell.


HTML
Copy
<svelte:fragment slot="sidebarLeft">
        <!-- Insert the list: -->
        <nav class="list-nav">
                <ul>
                        <li><a href="/">Home</a></li>
                        <li><a href="/about">About</a></li>
                </ul>
        </nav>
        <!-- --- -->
</svelte:fragment>
Page Setup
Let's add some basic content to our homepage. Open /src/routes/+page.svelte and replace the contents with the following. This will provide multiple elements automatically styled by Skeleton.


HTML
Copy
<div class="container mx-auto p-8 space-y-8">
        <h1 class="h1">Hello Skeleton</h1>
        <p>Lorem ipsum dolor sit amet consectetur adipisicing elit.</p>
        <section>
                <a class="btn variant-filled-primary" href="https://kit.svelte.dev/">SvelteKit</a>
                <a class="btn variant-filled-secondary" href="https://tailwindcss.com/">Tailwind</a>
                <a class="btn variant-filled-tertiary" href="https://github.com/">GitHub</a>
        </section>
</div>
Add a Component
Finally let's implement Skeleton's Avatar component. First, import the component, then add it anywhere within your page, we recommend within the .container element.


HTML
Copy
<script>
        import { Avatar } from '@skeletonlabs/skeleton';
</script>


<Avatar src="https://i.pravatar.cc/" />
Congrats! You have now created a simple Skeleton project. Feel free to begin customizing and implementing additional Tailwind, Svelte, and Utility features.




SKELETON ESSENTIALS


THEMES


Themes
Skeleton leans into Tailwind's best practices when implementing themes. This includes support for color opacity and dark mode. Themes also enable Skeleton's design tokens system.


CSS Custom Properties
Skeleton themes are generated using a number of CSS Custom Properties, also known as as CSS variables.


CSS Property        Description
--theme-font-family-base        Set the font family for your default base text.
--theme-font-family-heading        Set the font family for your heading text.
--theme-font-color-base        Set the default text color for light mode.
--theme-font-color-dark        Set the default text color for dark mode.
--theme-rounded-base        Set the border radius for small elements, such as buttons, inputs, etc.
--theme-rounded-container        Set the border radius for large elements, such as cards, textfields, etc.
--theme-border-base        Set the default border size for elements, including inputs.
--on-[color]        Set an accessible overlapping text or fill color per each theme color.
--color-[color]-[shade]        Defines each color and shade value for your theme.
Overwriting Properties
Similar to variables in other languages, CSS properties can be overwritten. By adding the following snippet in /src/app.postcss, you can overwrite the base and container border radius styles for your active theme.


CSS
Copy
/* NOTE: set your target theme name (ex: skeleton, wintry, modern, etc) */


:root [data-theme='skeleton'] {
        --theme-rounded-base: 20px;
        --theme-rounded-container: 4px;
}
Likewise, you can override base and heading font family settings as shown below.


CSS
Copy
/* NOTE: set your target theme name (ex: skeleton, wintry, modern, etc) */


:root [data-theme='skeleton'] {
    --theme-font-family-base: 'MyCustomFont', sans-serif;
    --theme-font-family-heading: 'MyCustomFont', sans-serif;
}
For deeper customization, consider cloning Skeleton's preset themes, modifying each as desired, then implementing as a custom theme. Follow the theme generator implementation guide for more information.


CSS-in-JS Format
New in v2
Skeleton now defines theme settings via the CSS-in-JS format. This allows themes to be easily registered within the Skeleton Tailwind plugin, rather than relying on additional stylesheet imports.


Tailwind Plugin Settings
New in v2
Themes are configured via Skeleton's Tailwind plugin in your tailwind.config.[ts|js|cjs], found in your project root.


Register Themes
Skeleton provides a number of preset themes out of the box. You'll need to register at least one theme to load them and make them available to use.


TYPESCRIPT
Copy
plugins: [
        skeleton({
                themes: {
                        // Register each theme within this array:
                        preset: [ "skeleton", "modern", "crimson" ] 
                }
        })
]
Open /src/app.html and define the active theme to display using the data-theme attribute. You can modify this attribute to dynamically switch between any registered theme.


HTML
Copy
<body data-theme="skeleton">
Enhancements
Preset themes may sometimes include additional optional features, such as: heading font weights, background mesh gradients, and more. To enable these settings, include enhancements as shown below.


TYPESCRIPT
Copy
plugins: [
        skeleton({
                themes: {
                        preset: [
                                // Enable 'enhancements' per each registered theme:
                                { name: "skeleton", enhancements: true }
                        ] 
                }
        })
]
Custom Themes
View the theme generator for more information about implementing custom themes. Note that it is possible to mix and match preset and custom themes.


Dark Mode
By default Tailwind opts for light mode. If you wish to default to dark mode, append the following class to the html element within /src/app.html. View Tailwind's documentation for more information.


HTML
Copy
<html class="dark">
Note that Skeleton also provides a Lightswitch utility if you wish toggle between light and dark modes.


Backgrounds
The background color of your application is automatically set using one of Skeleton's design token styles. By default, this utilizes --color-surface-50 for light mode and --color-surface-900 for dark mode. Use your global stylesheet app.postcss to modify this.


CSS
Copy
/* Default setting: */
body { @apply bg-surface-50-900-token; }


/* --- */


/* Example: primary color via a design token: */
body { @apply bg-primary-50-900-token; }


/* Example: secondary color via Tailwind: */
body { @apply bg-secondary-50 dark:bg-secondary-900; }


/* Example: using vanilla CSS: */
body { background: red; }
.dark body { background: blue; }
Images and Gradients
You may optionally provide a background image, including the use of a CSS mesh gradient. Replace the static color values with theme color properties to create a fully adaptive gradient background.


Create a Mesh
CSS
Copy
html, body { @apply h-full; }
body {
        background-image:
                radial-gradient(at 0% 0%, rgba(var(--color-secondary-500) / 0.33) 0px, transparent 50%),
                radial-gradient(at 98% 1%, rgba(var(--color-error-500) / 0.33) 0px, transparent 50%);
        background-attachment: fixed;
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
}
Custom Fonts
Fonts may be installed from a local or remote source. For GDPR compliance and optimal performance we recommend installing the fonts locally. For this guide we'll demonstrate this process using free fonts from Google Fonts.


Local (recommended)
Remote
1. Download a Font
Select a font on Google Fonts, then tap the "Download Family" button near the top-right of the page.


Inter
2. Add the Font Files
Unzip the downloaded file, then copy all font files to the /static/fonts directory in the root of your SvelteKit project. When available we recommend using variable fonts as they require only a single file. Otherwise copy all static font file assets to the /static/fonts directory.


TERMINAL
Copy
/static/fonts/Inter-VariableFont_slnt,wght.ttf
3. Apply @font-face
At the top of your global stylesheet /src/app.postcss append the @font-face settings per each font. The font-family assigns the font's reference name, while src points to the font file(s) in your /static/fonts directory.


CSS
Copy
@font-face {
        /* Reference name */
        font-family: 'Inter';
        /* For multiple files use commas, ex: url(), url(), ... */
        src: url('/fonts/Inter-VariableFont_slnt,wght.ttf');
}
4. Set the Font Family.
Use CSS Property overrides or open your custom theme to set the font family for base and heading properties. Be sure to use the same reference name set above or your font will not work.


CSS
Copy
/* NOTE: set your target theme name (ex: skeleton, wintry, modern, etc) */


:root [data-theme='skeleton'] {
    --theme-font-family-base: 'Inter', sans-serif;
    --theme-font-family-heading: 'Inter', sans-serif;
    /* ... */
}
5. Preloading Fonts.
To avoid your page flickering during hydration, consider preloading fonts within the head tag in app.html


HTML
Copy
<link
        rel="preload"
        href="%sveltekit.assets%/fonts/Inter-VariableFont_slnt,wght.ttf"
        as="font"
        type="font/ttf"
        crossorigin
/>


COLORS


Colors
Skeleton themes extend Tailwind's color palette and can be used anywhere within your project.


Color        ID        Example
[style]-primary-[50-900]        Typically your primary brand color.
[style]-secondary-[50-900]        A secondary branding color for supplementary value.
[style]-tertiary-[50-900]        A third and additional branding color.
[style]-success-[50-900]        Used for successful or positive actions, such as a form submit alert.
[style]-warning-[50-900]        Used for negative or harmful actions, such as warnings.
[style]-error-[50-900]        May be used for errors, alerts, and invalid inputs.
[style]-surface-[50-900]        The base level colors, used for backgrounds.
Color Palette
Shade 500 is used as the default value.


Primary
50
100
200
300
400
500 ★
600
700
800
900
Secondary
50
100
200
300
400
500 ★
600
700
800
900
Tertiary
50
100
200
300
400
500 ★
600
700
800
900
Success
50
100
200
300
400
500 ★
600
700
800
900
Warning
50
100
200
300
400
500 ★
600
700
800
900
Error
50
100
200
300
400
500 ★
600
700
800
900
Surface
50
100
200
300
400
500 ★
600
700
800
900
Usage
HTML
Copy
<!-- Inlined classes -->
<div class="bg-primary-500 text-secondary-500">Skeleton</div>
HTML
Copy
<!-- Tailwind opacity scale -->
<div class="border border-primary-500/30">Skeleton</div>
CSS
Copy
/* Using Tailwind @apply */
.example { @apply text-primary-500; }
CSS
Copy
/* Using CSS custom properties. Note that colors are RGB values! */
body { background: rgba(var(--color-surface-900) / 1); }
ads via Carbon
Your new development career awaits. Check out the latest listings.
ADS VIA CARBON
On the Page
Color Palette
Usage
UI Toolkit for Svelte + Tailwind.


2.9.0


STYLING


Styling
This covers basic techniques for styling Skeleton components. View our comprehensive guide to learn more.


Via Component Props
This is the recommended manner to style most components. Each component provides a set of style props (read: properties) that allow you to override the default style classes. See a list of available options under the "Props" tab per each feature in Skeleton.


HTML
Copy
<ExampleComponent background="bg-secondary-500 md:bg-primary-500">Skeleton</ExampleComponent>
TIP: You may provide multiple utility classes per each prop, as well as use variations such as dark:bg-green-500.
Via the Class Attribute
If a style prop is not available, you can still provide arbitrary utility classes via a standard class attribute. These styles are always applied to the parent element in the component template.


HTML
Copy
<ExampleComponent class="text-3xl px-10 py-5">Skeleton</ExampleComponent>
Tailwind's Arbitrary Variants
If you need to target deeper than the parent element, we recommend using Tailwind's arbitrary variant syntax.


HTML
Copy
<ExampleComponent class="[&>.foo-label]:p-4">...</ExampleComponent>
This will affect the Parent > .foo-label element and apply a Tailwind class of p-4.


Global Styles Overrides
Skeleton components include selector classes, such as .avatar-image within the Avatar component. Please note that selector classes are always the first listed.


HTML
Copy
<img class="avatar-image ...">...</img>
Use these selector classes to target global style overrides to all instances of this feature in your global stylesheet.


CSS
Copy
.avatar-image { @apply border-2 border-red-500; }
In some cases you may need to use ! important or style light and dark mode variants to give precedence.


DESIGN TOKENS


Design Tokens
The Skeleton Tailwind plugin provides a set of utility classes that adjust to your theme settings.


Source
Page Source
Skeleton utilizes a simple but powerful design token system to implement theme settings in elements and components. These represent the defaults for most elements and components, which means they auto-adapt based on your theme with minimal configuration out of the box. Best of all you can use these within your custom components as well!


Theme Flow
Below is a visualization of how Skeleton uses your theme to control your UI. We start with your theme's CSS variables, then construct design token classes based on these variables, next components utilize these design token classes, then finally you construct your pages with sets of elements and components.


flow
Color Pairing Chart
Below is a visualization of color pairings in Skeleton. This is how we balance light and dark mode for your themes in practice. For example, the surface color swatch 50 is the lightest available color, so we utilize that for your light theme background color. While swatch 900 is the darkest, so vice versa. These two colors form a pair. We then generate design token classes for .bg-surface-50-900-token and bg-surface-900-50-token that automatically switch between these in light/dark mode respectively.


pairings
Backgrounds
Class        Values        Description
.bg-[color]-backdrop-token        Theme Colors        Background styles for modal backdrops.
.bg-[color]-hover-token        Theme Colors        Background styles for hoverable elements.
.bg-[color]-active-token        Theme Colors        Background styles for active selected elements.
.bg-[color]-[pairings]-token        Theme Colors
Color Pairing        Pairing values can be 50-900 or 900-50 format.
Border Radius
Class        Values        Description
.rounded-token                Border radius for small elements: buttons, badges, chips, etc.
.rounded-[corner]-token        tl | tr | bl | br        Corner border radius styles for small elements.
.rounded-container-token                Border radius for large elements, such as cards and textareas
.rounded-[corner]-container-token        tl | tr | bl | br        Corner border radius styles for large elements.
Borders
Class        Values        Description
.border-token                Implements your theme's configured border size.
.border-[color]-[pairings]-token        Theme Colors
Color Pairing        Pairing values can be 50-900 or 900-50 format.
Divide
Utility for controlling the border color between elements.


Class        Values        Description
.divide-[color]-[pairings]-token        Theme Colors
Color Pairing        Implements a text-decoration color. Pairing values can be 50-900 or 900-50 format.
SVG Fill Color
Class        Values        Description
.fill-token                The default responsive light/dark mode fill color.
.fill-on-[color]-token        Theme Colors        Provides an accessible foreground color.
Rings
Utilities for creating outline rings with box-shadows.


Class        Values        Description
.ring-outline-token                Creates a subtle transparent outline like Card elements.
.ring-[color]-[pairings]-token        Theme Colors
Color Pairing        Pairing values can be 50-900 or 900-50 format.
Text
Class        Values        Description
.font-heading-token                Implements your theme's configured heading font family.
.font-token                Implements your theme's configured base font family.
.text-token                Implements your theme's configured base text color.
.text-on-[color]-token        Theme Colors        Provides an accessible foreground color.
.text-[color]-[pairings]-token        Theme Colors
Color Pairing        Pairing values can be 50-900 or 900-50 format.
Text Decoration
Class        Values        Description
.decoration-[color]-[pairings]-token        Theme Colors
Color Pairing        Pairing values can be 50-900 or 900-50 format.
Accent
Class        Values        Description
accent-[color]-token        Theme Colors        Provides an input accent-color.




VARIANTS

Tailwind
Variants
Canned styles available to easily customize elements, components, and more.


Source
Page Source
Usage
Implement using .variant-[style]-[color]. Automatically applies an accessible text or SVG fill color.


HTML
Copy
<div class="variant-filled-primary">primary</div>
Filled


HTML
Copy
<div class="variant-filled-primary">primary</div>
HTML
Copy
<div class="variant-filled-secondary">secondary</div>
HTML
Copy
<div class="variant-filled-tertiary">tertiary</div>
HTML
Copy
<div class="variant-filled-success">success</div>
HTML
Copy
<div class="variant-filled-warning">warning</div>
HTML
Copy
<div class="variant-filled-error">error</div>
HTML
Copy
<div class="variant-filled-surface">surface</div>
Ghost


HTML
Copy
<div class="variant-ghost-primary">primary</div>
HTML
Copy
<div class="variant-ghost-secondary">secondary</div>
HTML
Copy
<div class="variant-ghost-tertiary">tertiary</div>
HTML
Copy
<div class="variant-ghost-success">success</div>
HTML
Copy
<div class="variant-ghost-warning">warning</div>
HTML
Copy
<div class="variant-ghost-error">error</div>
HTML
Copy
<div class="variant-ghost-surface">surface</div>
Soft


HTML
Copy
<div class="variant-soft-primary">primary</div>
HTML
Copy
<div class="variant-soft-secondary">secondary</div>
HTML
Copy
<div class="variant-soft-tertiary">tertiary</div>
HTML
Copy
<div class="variant-soft-success">success</div>
HTML
Copy
<div class="variant-soft-warning">warning</div>
HTML
Copy
<div class="variant-soft-error">error</div>
HTML
Copy
<div class="variant-soft-surface">surface</div>
Ringed


HTML
Copy
<div class="variant-ringed-primary">primary</div>
HTML
Copy
<div class="variant-ringed-secondary">secondary</div>
HTML
Copy
<div class="variant-ringed-tertiary">tertiary</div>
HTML
Copy
<div class="variant-ringed-success">success</div>
HTML
Copy
<div class="variant-ringed-warning">warning</div>
HTML
Copy
<div class="variant-ringed-error">error</div>
HTML
Copy
<div class="variant-ringed-surface">surface</div>
Glass
Adds a frosted glass style effect. Perfect for overlapping busy or animated backgrounds.




HTML
Copy
<div class="variant-glass-primary">primary</div>
HTML
Copy
<div class="variant-glass-secondary">secondary</div>
HTML
Copy
<div class="variant-glass-tertiary">tertiary</div>
HTML
Copy
<div class="variant-glass-success">success</div>
HTML
Copy
<div class="variant-glass-warning">warning</div>
HTML
Copy
<div class="variant-glass-error">error</div>
HTML
Copy
<div class="variant-glass-surface">surface</div>
Gradients
Provides two-toned gradient combinations. Requires a direction, such as bg-gradient-to-br (bottom-right).




Core Trio


HTML
Copy
<div class="bg-gradient-to-br variant-gradient-primary-secondary">Skeleton</div>
HTML
Copy
<div class="bg-gradient-to-br variant-gradient-secondary-tertiary">Skeleton</div>
HTML
Copy
<div class="bg-gradient-to-br variant-gradient-tertiary-primary">Skeleton</div>
Core Trio (reversed)


HTML
Copy
<div class="bg-gradient-to-br variant-gradient-secondary-primary">Skeleton</div>
HTML
Copy
<div class="bg-gradient-to-br variant-gradient-tertiary-secondary">Skeleton</div>
HTML
Copy
<div class="bg-gradient-to-br variant-gradient-primary-tertiary">Skeleton</div>
State Trio


HTML
Copy
<div class="bg-gradient-to-br variant-gradient-success-warning">Skeleton</div>
HTML
Copy
<div class="bg-gradient-to-br variant-gradient-warning-error">Skeleton</div>
HTML
Copy
<div class="bg-gradient-to-br variant-gradient-error-success">Skeleton</div>
State Trio (reversed)


HTML
Copy
<div class="bg-gradient-to-br variant-gradient-warning-success">Skeleton</div>
HTML
Copy
<div class="bg-gradient-to-br variant-gradient-error-warning">Skeleton</div>
HTML
Copy
<div class="bg-gradient-to-br variant-gradient-success-error">Skeleton</div>




TRANSITIONS


Transitions
Skeleton provides a simple interface for modifying Svelte component transitions. This supports Svelte-provided transitions, such as: fade, blur, fly, slide, and scale. As well as custom CSS and Javascript transitions.


Transitions
Look for this indicator on each component page. If present, custom transitions are supported.


Properties
Provide the transition and transition parameters as follows.


Transition In
HTML
Copy
<ExampleComponent transitionIn={fade} transitionInParams={{ duration: 200 }} />
Transition Out
HTML
Copy
<ExampleComponent transitionOut={fade} transitionOutParams={{ duration: 200 }} />
Parameters
You can modify parameters for both the default in and out transitions.


HTML
Copy
<ExampleComponent transitionInParams={{ duration: 400 }} />
Disable Transitions
To disable all transitions for a single component, set transitions to false. This will affect both the in and out transitions.


HTML
Copy
<ExampleComponent transitions={false}/>
Non-Supported Transitions
Note that Svelte provides special crossfade and draw transitions. However these work and operate in a different manner than standard transition such as fade and fly. These are not supported within the dynamic transition system at this time.


Reduced Motion
To ensure a better experience for users who are sensitive to motion or have vestibular disorders, Skeleton's default behavior is to disable all transitions when users enable prefers-reduced-motion in their browser settings.


Force Enable
For components with subtle transitions, you may choose to override this behavior by applying a property of transitions={true} to the component. We encourage you to use this setting with caution though.


Store
You may utilize prefersReducedMotionStore to access the user's preferred motion setting.


TYPESCRIPT
Copy
import { prefersReducedMotionStore } from '@skeletonlabs/skeleton';


const userMotionPreference = $prefersReducedMotionStore;




SKELETON LIBRARY




SKELETON LIBRARY
	COMPONENT
	TYPESCRIPT IMPORT
	PAGE SOURCE
	NOTES
	Steppers
https://www.skeleton.dev/components/steppers


	import { Stepper, Step } from '@skeletonlabs/skeleton';
	<script lang="ts">
        import DocsShell from '$lib/layouts/DocsShell/DocsShell.svelte';
        import { DocsFeature, type DocsShellSettings } from '$lib/layouts/DocsShell/types';
        import DocsPreview from '$lib/components/DocsPreview/DocsPreview.svelte';
        // Components
        import { Stepper, Step, SlideToggle, CodeBlock } from '@skeletonlabs/skeleton';
        // Sveld
        import sveldStepper from '@skeletonlabs/skeleton/components/Stepper/Stepper.svelte?raw&sveld';
        import sveldStep from '@skeletonlabs/skeleton/components/Stepper/Step.svelte?raw&sveld';


        // Docs Shell
        const settings: DocsShellSettings = {
                feature: DocsFeature.Component,
                name: 'Steppers',
                description: 'Divide and present content in sequenced steps.',
                imports: ['Stepper', 'Step'],
                source: 'packages/skeleton/src/lib/components/Stepper',
                components: [
                        { label: 'Stepper', sveld: sveldStepper },
                        {
                                label: 'Step',
                                sveld: sveldStep,
                                overrideProps: [
                                        'gap',
                                        'stepTerm',
                                        'justify',
                                        'buttonBack',
                                        'buttonBackLabel',
                                        'buttonNext',
                                        'buttonNextLabel',
                                        'buttonComplete',
                                        'buttonCompleteLabel'
                                ]
                        }
                ],
                transitionIn: 'fade',
                transitionOut: 'fade'
        };


        // Local
        let locked = true;


        function onNextHandler(e: CustomEvent): void {
                console.log('event:next', e.detail);
        }
        function onBackHandler(e: CustomEvent): void {
                console.log('event:prev', e.detail);
        }
        function onStepHandler(e: CustomEvent): void {
                console.log('event:step', e.detail);
        }
        function onCompleteHandler(e: CustomEvent): void {
                console.log('event:complete', e.detail);
                alert('Complete!');
        }
</script>


<DocsShell {settings}>
        <!-- Slot: Sandbox -->
        <svelte:fragment slot="sandbox">
                <DocsPreview>
                        <svelte:fragment slot="preview">
                                <div class="w-full card p-4 text-token">
                                        <Stepper on:next={onNextHandler} on:back={onBackHandler} on:step={onStepHandler} on:complete={onCompleteHandler}>
                                                <Step>
                                                        <svelte:fragment slot="header">Get Started!</svelte:fragment>
                                                        <p>This example Stepper will teach you how to use this component. Tap <u>next</u> to proceed to the next step.</p>
                                                        <!-- <svelte:fragment slot="navigation"><button class="btn variant-ghost-error">Abort</button></svelte:fragment> -->
                                                </Step>
                                                <Step>
                                                        <svelte:fragment slot="header">Going Back.</svelte:fragment>
                                                        <p>
                                                                The current step progress will be tracked at the top. Tap <u>back</u> to return to the previous step.
                                                        </p>
                                                </Step>
                                                <Step {locked}>
                                                        <svelte:fragment slot="header">A Locked Step.</svelte:fragment>
                                                        <p>
                                                                This Step component uses the <code class="code">locked</code> property to prevent progress. This is ideal for multi-step forms,
                                                                such as registration. For now we'll simulate a successful validation condition using the toggle below.
                                                        </p>
                                                        <aside class="alert variant-ghost-warning">
                                                                <div class="alert-message">
                                                                        <p>This step is <u>{locked ? 'Locked' : 'Unlocked'}</u></p>
                                                                </div>
                                                                <div class="alert-actions">
                                                                        <SlideToggle name="locked-state" bind:checked={locked} active="bg-warning-500" />
                                                                </div>
                                                        </aside>
                                                </Step>
                                                <Step>
                                                        <svelte:fragment slot="header">Long Form Content.</svelte:fragment>
                                                        <p>The steps will expand to fit content of any length.</p>
                                                        <p>
                                                                <!-- cspell:disable -->
                                                                Lorem ipsum dolor sit amet consectetur adipisicing elit. Itaque vel expedita porro vero, saepe dicta repellendus facilis ab accusamus
                                                                unde, tempora ut nobis eum. Veniam, architecto corrupti. Lorem ipsum dolor sit amet consectetur adipisicing elit. Itaque vel
                                                                expedita porro vero, saepe dicta repellendus facilis ab accusamus unde, tempora ut nobis eum. Veniam, architecto corrupti. Lorem
                                                                ipsum dolor sit amet consectetur adipisicing elit. Itaque vel expedita porro vero, saepe dicta repellendus facilis ab accusamus
                                                                unde, tempora ut nobis eum. Veniam, architecto corrupti. Lorem ipsum dolor sit amet consectetur adipisicing elit. Itaque vel
                                                                expedita porro vero, saepe dicta repellendus facilis ab accusamus unde, tempora ut nobis eum. Veniam, architecto corrupti. Lorem
                                                                ipsum dolor sit amet consectetur adipisicing elit. Itaque vel expedita porro vero, saepe dicta repellendus facilis ab accusamus
                                                                unde, tempora ut nobis eum. Veniam, architecto corrupti.
                                                                <!-- cspell:enable -->
                                                        </p>
                                                </Step>
                                                <Step>
                                                        <svelte:fragment slot="header">Almost Done.</svelte:fragment>
                                                        <p>
                                                                A Complete button will appear on the last step. When the step is unlocked and the button pressed, an <code class="code"
                                                                        >on:complete</code
                                                                > event will be fired. You can use this trigger to submit form data to a server.
                                                        </p>
                                                </Step>
                                        </Stepper>
                                </div>
                        </svelte:fragment>
                        <svelte:fragment slot="source">
                                <CodeBlock
                                        language="html"
                                        code={`
<Stepper>
        <Step>
                <svelte:fragment slot="header">(header)</svelte:fragment>
                (content)
        </Step>
        <Step>
                <svelte:fragment slot="header">(header)</svelte:fragment>
                (content)
        </Step>
        <!-- ... -->
</Stepper>
                        `}
                                />
                        </svelte:fragment>
                </DocsPreview>
        </svelte:fragment>


        <!-- Slot: Usage -->
        <svelte:fragment slot="usage">
                <p>
                        Create a set of Steps within the Stepper, then use the <code class="code">on:complete</code> event to detect when all steps are
                        complete. Since horizontal space may be limited on small screens, we recommend no more than <em>five</em> steps at max.
                </p>
                <!-- Event Handlers -->
                <section class="space-y-4">
                        <h2 class="h2">Event Handlers</h2>
                        <h3 class="h3">Complete Event</h3>
                        <CodeBlock language="ts" code={`function onCompleteHandler(e: Event): void { console.log('event:complete', e); }`} />
                        <CodeBlock language="html" code={`<Stepper on:complete={onCompleteHandler}>...</Stepper>`} />
                        <h3 class="h3">Next, Step and Previous</h3>
                        <p>Events are fired when the next or previous steps are pressed, step fires for both cases.</p>
                        <CodeBlock
                                language="ts"
                                code={`function onStepHandler(e: {detail: {state: {current: number, total: number}, step: number}}): void {
        console.log('event:step', e);
}`}
                        />
                        <CodeBlock language="html" code={`<Stepper on:next={onNextHandler} on:step={onStepHandler} on:back={onBackHandler}>...</Stepper>`} />
                        <blockquote class="blockquote">
                                TIP: <code class="code">e.detail.state.current</code> contains the step shown to the user after navigation,
                                <code class="code">e.detail.step</code> contains the step where navigation occurred.
                        </blockquote>
                </section>
                <!-- Locked State -->
                <section class="space-y-4">
                        <h2 class="h2">Locked State</h2>
                        <p>
                                Each Step can have a <code class="code">locked</code> property set, when set to <em>TRUE</em> this locks progression for that step. For
                                example, you can lock a step until a form within it becomes valid.
                        </p>
                        <CodeBlock language="ts" code={`let lockedState: boolean = true;`} />
                        <CodeBlock language="html" code={`<Step locked={lockedState}>...</Step>`} />
                </section>
                <!-- Step Term -->
                <section class="space-y-4">
                        <h2 class="h2">Step Term</h2>
                        <p>
                                Use the <code class="code">stepTerm</code> property to override text shown in the animated section at the top of the Stepper, which is
                                useful if you need i18n support for other languages.
                        </p>
                        <CodeBlock
                                language="html"
                                code={`
<!-- German: Schritt 1, Schritt 2, ... This will override the stepTerm in the Step Counter -->
<Stepper stepTerm="Schritt">
        <!-- French: Étape 1, Étape 2, ... -->
        <Step stepTerm='Étape'>...</Step>
        <!-- Spanish: Paso 1, Paso 2, ... -->
        <Step stepTerm='Paso'>...</Step>
</Stepper>
                        `}
                        />
                        <p>
                                This can be overwritten per each Step as well, which updates the <em>default</em> and <em>header</em> slot placeholder text.
                        </p>
                </section>
                <!-- Navigation Slot -->
                <section class="space-y-4">
                        <h2 class="h2">Navigation Slot</h2>
                        <!-- prettier-ignore -->
                        <p>
                                You may override the contents of the disabled Back button in the <u>first step</u> by supplying a <code class="code">navigation</code> slot. Use this to supply a message or implement a custom action. This is not supported for step two and forward.
                        </p>
                        <CodeBlock
                                language="html"
                                code={`
<Step>
        <p>(content)</p>
        <svelte:fragment slot="navigation">
                <button class="btn variant-ghost-error" on:click={triggerAbort}>Abort</button>
        </svelte:fragment>
</Step>
                        `}
                        />
                </section>
        </svelte:fragment>
</DocsShell>


	  

	App Shell
https://www.skeleton.dev/components/app-shell


	import { AppShell } from '@skeletonlabs/skeleton';
	<script lang="ts">
        // Docs
        import DocsShell from '$lib/layouts/DocsShell/DocsShell.svelte';
        import { DocsFeature, type DocsShellSettings } from '$lib/layouts/DocsShell/types';
        import DocsPreview from '$lib/components/DocsPreview/DocsPreview.svelte';
        // Components
        import { AppShell, CodeBlock } from '@skeletonlabs/skeleton';
        // Sveld
        import sveldAppShell from '@skeletonlabs/skeleton/components/AppShell/AppShell.svelte?raw&sveld';


        // Docs Shell
        const settings: DocsShellSettings = {
                feature: DocsFeature.Component,
                name: 'App Shell',
                description: 'Responsive shell for controlling application layout.',
                imports: ['AppShell'],
                source: 'packages/skeleton/src/lib/components/AppShell',
                components: [{ sveld: sveldAppShell }]
        };


        // Local
        let state = {
                header: true,
                pageHeader: false,
                sidebarLeft: true,
                sidebarRight: false,
                pageFooter: true,
                footer: false
        };


        function toggle(key: keyof typeof state): void {
                state[key] = !state[key];
        }
</script>


<DocsShell {settings}>
        <!-- Slot: Sandbox -->
        <svelte:fragment slot="sandbox">
                <div class="space-y-2">
                        <DocsPreview regionPreview="h-[280px]">
                                <svelte:fragment slot="lead">
                                        <p class="w-full text-center">The shaded regions represent the portion of the page that scrolls vertically.</p>
                                </svelte:fragment>
                                <svelte:fragment slot="preview">
                                        <AppShell
                                                class="card h-full p-1"
                                                slotSidebarLeft="grid grid-cols-1"
                                                slotSidebarRight="grid grid-cols-1"
                                                slotPageContent="grid grid-cols-1"
                                        >
                                                <svelte:fragment slot="header">
                                                        {#if state.header}
                                                                <div class="card variant-soft p-2 m-0.5 flex justify-center items-center overflow-hidden text-xs">header</div>
                                                        {/if}
                                                </svelte:fragment>
                                                <svelte:fragment slot="sidebarLeft">
                                                        {#if state.sidebarLeft}
                                                                <div class="card variant-soft p-2 m-0.5 flex justify-center items-center overflow-hidden text-xs">sidebarLeft</div>
                                                        {/if}
                                                </svelte:fragment>
                                                <svelte:fragment slot="sidebarRight">
                                                        {#if state.sidebarRight}
                                                                <div class="card variant-soft p-2 m-0.5 flex justify-center items-center overflow-hidden text-xs">sidebarRight</div>
                                                        {/if}
                                                </svelte:fragment>
                                                <svelte:fragment slot="pageHeader">
                                                        {#if state.pageHeader}
                                                                <div class="card variant-soft-primary p-2 m-0.5 flex justify-center items-center overflow-hidden text-xs">pageHeader</div>
                                                        {/if}
                                                </svelte:fragment>
                                                <svelte:fragment slot="pageFooter">
                                                        {#if state.pageFooter}
                                                                <div class="card variant-soft-primary p-2 m-0.5 flex justify-center items-center overflow-hidden text-xs">pageFooter</div>
                                                        {/if}
                                                </svelte:fragment>
                                                <!-- --- -->
                                                <div class="card variant-soft-primary p-2 m-0.5 flex justify-center items-center overflow-hidden text-xs">
                                                        {'<slot />'}
                                                </div>
                                                <!-- --- -->
                                                <svelte:fragment slot="footer">
                                                        {#if state.footer}
                                                                <div class="card variant-soft p-2 m-0.5 flex justify-center items-center overflow-hidden text-xs">footer</div>
                                                        {/if}
                                                </svelte:fragment>
                                        </AppShell>
                                </svelte:fragment>
                                <svelte:fragment slot="source">
                                        <CodeBlock
                                                language="html"
                                                code={`
<AppShell>
        ${state.header ? '<svelte:fragment slot="header">Header</svelte:fragment>' : '<!-- (header) -->'}
        ${state.sidebarLeft ? '<svelte:fragment slot="sidebarLeft">Sidebar Left</svelte:fragment>' : '<!-- (sidebarLeft) -->'}
        ${state.sidebarRight ? '<svelte:fragment slot="sidebarRight">Sidebar Right</svelte:fragment>' : '<!-- (sidebarRight) -->'}
        ${state.pageHeader ? '<svelte:fragment slot="pageHeader">Page Header</svelte:fragment>' : '<!-- (pageHeader) -->'}
        <!-- Router Slot -->
        <slot />
        <!-- ---- / ---- -->
        ${state.pageFooter ? '<svelte:fragment slot="pageFooter">Page Footer</svelte:fragment>' : '<!-- (pageFooter) -->'}
        ${state.footer ? '<svelte:fragment slot="footer">Footer</svelte:fragment>' : '<!-- (footer) -->'}
</AppShell>`}
                                        />
                                </svelte:fragment>
                        </DocsPreview>
                        <!-- prettier-ignore -->
                        <div class="card p-4 mx-auto grid grid-cols-2 md:grid-cols-3 2xl:grid-cols-6 gap-4">
                                <button class="btn {state.header ? 'variant-filled' : 'variant-soft'}" on:click={() => { toggle('header'); }}>
                                        header
                                </button>
                                        <button class="btn {state.sidebarLeft ? 'variant-filled' : 'variant-soft'}" on:click={() => { toggle('sidebarLeft'); }}>
                                        sidebarLeft
                                </button>
                                        <button class="btn {state.sidebarRight ? 'variant-filled' : 'variant-soft'}" on:click={() => { toggle('sidebarRight'); }}>
                                        sidebarRight
                                </button>
                                        <button class="btn {state.pageHeader ? 'variant-filled' : 'variant-soft'}" on:click={() => { toggle('pageHeader'); }}>
                                        pageHeader
                                </button>
                                        <button class="btn {state.pageFooter ? 'variant-filled' : 'variant-soft'}" on:click={() => { toggle('pageFooter'); }}>
                                        pageFooter
                                </button>
                                        <button class="btn {state.footer ? 'variant-filled' : 'variant-soft'}" on:click={() => { toggle('footer'); }}>
                                        footer
                                </button>
                        </div>
                </div>
        </svelte:fragment>


        <!-- Slot: Usage -->
        <svelte:fragment slot="usage">
                <section class="space-y-4">
                        <p>
                                Implement the App Shell in your app's root layout in <code class="code">/src/routes/+layout.svelte</code>. Slot order does not
                                matter.
                        </p>
                </section>
                <section class="space-y-4">
                        <div class="flex items-center space-x-2">
                                <h2 class="h2">Prerequisites</h2>
                                <span class="badge variant-filled-warning">Required</span>
                        </div>
                        <!-- prettier-ignore -->
                        <p>
                                The App Shell will need to expand to fill all available space within your app's <em>body</em> tag. Open <code class="code">/src/app.html</code> and add the following classes.
                                <a class="anchor" href="https://github.com/sveltejs/kit/issues/6244#issuecomment-1226600661" target="_blank" rel="noreferrer">This wrapping element is required</a> and the style of <code class="code">display: contents</code> should remain.
                        </p>
                        <CodeBlock
                                language="html"
                                code={`<body>\n\t<div style="display: contents" class="h-full overflow-hidden">%sveltekit.body%</div>\n</body>`.trim()}
                        />
                        <p>
                                Then update your global stylesheet with the following. This will disable overflow for <em>html</em> and <em>body</em> tags to prevent
                                duplicate scroll bars.
                        </p>
                        <CodeBlock language="css" code={`html, body { @apply h-full overflow-hidden; }`} />
                </section>
                <section class="space-y-4">
                        <h2 class="h2">Using an App Bar</h2>
                        <p>
                                If you wish for your <a class="anchor" href="/components/app-bar">App Bar</a> component to remain fixed at the top of the page,
                                embed it into the top-most <code class="code">header</code> slot.
                        </p>
                        <CodeBlock
                                language="html"
                                code={`
<AppShell>
        <svelte:fragment slot="header">
                <AppBar>Skeleton</AppBar>
        </svelte:fragment>
        <!-- ... -->
</AppShell>`}
                        />
                        <p>If you wish for your App Bar to scroll with the page, insert it into the <code class="code">pageHeader</code> slot.</p>
                        <CodeBlock
                                language="html"
                                code={`
<AppShell>
        <svelte:fragment slot="pageHeader">
                <AppBar>Skeleton</AppBar>
        </svelte:fragment>
        <!-- ... -->
</AppShell>`}
                        />
                        <p>If you wish to have a sticky <code class="code">pageHeader</code>, apply the following App Shell prop styles.</p>
                        <CodeBlock language="html" code={`<AppShell regionPage="relative" slotPageHeader="sticky top-0 z-10">...</AppShell>`} />
                </section>
                <section class="space-y-4">
                        <h2 class="h2">Responsive Sidebars</h2>
                        <p>
                                Sidebars have a default width of <code class="code">auto</code>. This means they will automatically collapse when their contents are
                                <em>empty</em>
                                or
                                <em>hidden</em>. Use this to remove the sidebar with CSS media queries via
                                <a class="anchor" href="https://tailwindcss.com/docs/responsive-design" target="_blank" rel="noreferrer"
                                        >Tailwind's responsive breakpoints</a
                                >.
                        </p>
                        <CodeBlock
                                language="html"
                                code={`
<AppShell>
        <svelte:fragment slot="sidebarLeft">
                <!-- Hidden below Tailwind's large breakpoint -->
                <div id="sidebar-left" class="hidden lg:block">Sidebar</div>
        </svelte:fragment>
</AppShell>`}
                        />
                        <aside class="alert variant-ghost-warning">
                                <i class="fa-solid fa-lightbulb text-2xl" />
                                <div class="alert-message">Consider hiding your sidebar for smaller screens and replace it with a Drawer.</div>
                                <div class="alert-actions">
                                        <a href="/blog/how-to-implement-a-responsive-sidebar-drawer" target="_blank" rel="noreferrer" class="btn variant-filled">
                                                View Tutorial
                                        </a>
                                </div>
                        </aside>
                </section>
                <section class="space-y-4">
                        <h2 class="h2">Scroll to Top on Navigation</h2>
                        <p>
                                If you wish to have the App Shell page region auto-scroll to the top when navigating, add the following to your root layout in <code
                                        class="code">/src/routes/+layout.svelte</code
                                >.
                        </p>
                        <CodeBlock
                                language="ts"
                                code={`
import type { AfterNavigate } from '@sveltejs/kit';
import { afterNavigate } from '$app/navigation';


afterNavigate((params: AfterNavigate) => {
    const isNewPage = params.from?.url.pathname !== params.to?.url.pathname;
    const elemPage = document.querySelector('#page');
    if (isNewPage && elemPage !== null) {
        elemPage.scrollTop = 0;
    }
});
`}
                        />
                </section>
                <section class="space-y-4">
                        <h2 class="h2">Tracking Scroll Position</h2>
                        <p>Use the <code class="code">on:scroll</code> event to detect when the page region is scrolled vertically.</p>
                        <CodeBlock
                                language="ts"
                                code={`
import type { ComponentEvents } from 'svelte';


function scrollHandler(event: ComponentEvents<AppShell>['scroll']) {
        console.log(event.currentTarget.scrollTop);
}
`}
                        />
                        <CodeBlock language="html" code={`<AppShell ... on:scroll={scrollHandler}>`} />
                </section>
                <section class="space-y-4">
                        <h2 class="h2">Scrollbar Gutter</h2>
                        <!-- prettier-ignore -->
                        <p>
                                Use the <a class="anchor" href="https://developer.mozilla.org/en-US/docs/Web/CSS/scrollbar-gutter" target="_blank">scrollbar gutter</a> property to adjust how the page region scrollbar gutters are handled. View a <a class="anchor" href="https://www.youtube.com/shorts/mg49F9qUs38" target="_blank">quick demo video</a>.
                        </p>
                        <CodeBlock language="ts" code={`<AppShell scrollbarGutter="auto">...</AppShell>`} />
                </section>
                <section class="space-y-4">
                        <h2 class="h2">Accessibility</h2>
                        <p>
                                Please be aware that the App Shell does not support window scoped scrolling. This may affect certain features, such as
                                pull-to-refresh on mobile. In order to scroll the page region you first need to focus the page with either a touch or click. If you
                                require window scoped scrolling we recommend you implement a custom layout in place of the App Shell.
                        </p>
                </section>
        </svelte:fragment>
</DocsShell>
	  

	App Bar
https://www.skeleton.dev/components/app-bar


	import { AppBar } from '@skeletonlabs/skeleton';
	<script lang="ts">
        // Docs
        import DocsShell from '$lib/layouts/DocsShell/DocsShell.svelte';
        import { DocsFeature, type DocsShellSettings } from '$lib/layouts/DocsShell/types';
        import DocsPreview from '$lib/components/DocsPreview/DocsPreview.svelte';
        // Components
        import { AppBar, CodeBlock } from '@skeletonlabs/skeleton';
        // Sveld
        import sveldAppBar from '@skeletonlabs/skeleton/components/AppBar/AppBar.svelte?raw&sveld';


        // Docs Shell
        const settings: DocsShellSettings = {
                feature: DocsFeature.Component,
                name: 'App Bar',
                description:
                        'A header element for the top of your page layout. Pairs well with the <a class="anchor" href="/components/app-shell">App Shell</a>.',
                imports: ['AppBar'],
                source: 'packages/skeleton/src/lib/components/AppBar',
                aria: 'https://www.w3.org/WAI/ARIA/apg/patterns/toolbar/',
                components: [{ sveld: sveldAppBar }]
        };
</script>


<DocsShell {settings}>
        <!-- Slot: Sandbox -->
        <svelte:fragment slot="sandbox">
                <DocsPreview regionViewport="!text-current">
                        <svelte:fragment slot="preview">
                                <AppBar class="w-full">
                                        <svelte:fragment slot="lead">
                                                <i class="fa-solid fa-arrow-left text-2xl" />
                                        </svelte:fragment>
                                        <svelte:fragment slot="trail">
                                                <i class="fa-solid fa-paperclip text-xl" />
                                                <i class="fa-regular fa-calendar text-xl" />
                                                <i class="fa-solid fa-circle-user text-xl" />
                                        </svelte:fragment>
                                        <svelte:fragment slot="headline">
                                                <h1 class="h1">Headline</h1>
                                        </svelte:fragment>
                                </AppBar>
                        </svelte:fragment>
                        <svelte:fragment slot="source">
                                <CodeBlock
                                        language="html"
                                        code={`
<AppBar>
        <svelte:fragment slot="lead">(icon)</svelte:fragment>
        <svelte:fragment slot="trail">(actions)</svelte:fragment>
        <svelte:fragment slot="headline">(headline)</svelte:fragment>
</AppBar>
`}
                                />
                        </svelte:fragment>
                </DocsPreview>
        </svelte:fragment>


        <!-- Slot: Usage -->
        <svelte:fragment slot="usage">
                <p>App Bars can be generated with a number of different configurations by mixing and matching available slots and props.</p>
                <!-- Single Row and Title -->
                <section class="space-y-4">
                        <h2 class="h2">Single Row and Title</h2>
                        <DocsPreview background="neutral" regionViewport="!text-current">
                                <svelte:fragment slot="preview">
                                        <AppBar class="w-full">
                                                <svelte:fragment slot="lead">
                                                        <i class="fa-solid fa-arrow-left text-2xl" />
                                                </svelte:fragment>
                                                <h2 class="h2" data-toc-ignore>Title</h2>
                                                <svelte:fragment slot="trail">
                                                        <i class="fa-solid fa-paperclip text-xl" />
                                                        <i class="fa-regular fa-calendar text-xl" />
                                                        <i class="fa-solid fa-circle-user text-xl" />
                                                </svelte:fragment>
                                        </AppBar>
                                </svelte:fragment>
                                <svelte:fragment slot="source">
                                        <CodeBlock
                                                language="html"
                                                code={`
<AppBar>
        <svelte:fragment slot="lead">(icon)</svelte:fragment>
        (title)
        <svelte:fragment slot="trail">(actions)</svelte:fragment>
</AppBar>
`}
                                        />
                                </svelte:fragment>
                        </DocsPreview>
                </section>
                <!-- Barebones -->
                <section class="space-y-4">
                        <h2 class="h2">Barebones</h2>
                        <DocsPreview background="neutral" regionViewport="!text-current">
                                <svelte:fragment slot="preview">
                                        <AppBar class="w-full"><h2 class="h2" data-toc-ignore>Title</h2></AppBar>
                                </svelte:fragment>
                                <svelte:fragment slot="source">
                                        <CodeBlock language="html" code={`<AppBar>(title)</AppBar>`} />
                                </svelte:fragment>
                        </DocsPreview>
                </section>
                <section class="space-y-4">
                        <h2 class="h2">Using Grid Layout</h2>
                        <!-- prettier-ignore -->
                        <p>
                                The main row utilizes a grid-based layout. Utilize Tailwind's <a class="anchor" href="https://tailwindcss.com/docs/grid-column" target="_blank" rel="noreferrer">grid column</a> utility classes to control column width. Then use
                                <a class="anchor" href="https://tailwindcss.com/docs/place-content" target="_blank" rel="noreferrer">place settings</a> to adjust the placement of the slot contents.
                        </p>
                        <DocsPreview background="neutral" regionViewport="!text-current">
                                <svelte:fragment slot="preview">
                                        <AppBar gridColumns="grid-cols-3" slotDefault="place-self-center" slotTrail="place-content-end" class="w-full">
                                                <svelte:fragment slot="lead">
                                                        <i class="fa-solid fa-bars text-2xl" />
                                                </svelte:fragment>
                                                <h2 class="h2" data-toc-ignore>Title</h2>
                                                <svelte:fragment slot="trail">
                                                        <i class="fa-solid fa-circle-user text-3xl" />
                                                </svelte:fragment>
                                        </AppBar>
                                </svelte:fragment>
                                <svelte:fragment slot="source">
                                        <CodeBlock
                                                language="html"
                                                code={`
<AppBar gridColumns="grid-cols-3" slotDefault="place-self-center" slotTrail="place-content-end">
        <svelte:fragment slot="lead">(icon)</svelte:fragment>
        (title)
        <svelte:fragment slot="trail">(actions)</svelte:fragment>
</AppBar>
`}
                                        />
                                </svelte:fragment>
                        </DocsPreview>
                        <p>The example above provides an even three column layout with the title centered and actions right-aligned.</p>
                </section>
        </svelte:fragment>
</DocsShell>